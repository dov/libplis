import re

tools = ['default']
if ARGUMENTS.get('vbox', 0):
    tools = ['mingw']
tools += ['textfile']

libs = ['pcre']
linkflags = []
libs = 'glib-2.0 libpcre'

if ARGUMENTS.get('debug', 0):
    cppflags=["-Wall", "-g"]
else:
    cppflags=["-Wall", "-O2"]

env = Environment(CPPFLAGS= cppflags,
                  CXXFLAGS = ["-std=c++1y"],
                  LINKFLAGS = linkflags,
                  tools = tools
                  )

# All purpose template filling routine
def template_fill(env, target, source):
    out = open(str(target[0]), "wb")
    inp = open(str(source[0]), "r")

    for line in inp.readlines():
        line = re.sub('@(.*?)@',
                      lambda x: env[x.group(1)],
                      line)
        out.write(line)
        
    out.close()
    inp.close()

if ARGUMENTS.get('mingw', 0) or ARGUMENTS.get('mingw64', 0):
    if ARGUMENTS.get('mingw', 0):
        env['HOST']='w32'
        env['HOSTBITS']='32'
        env['ARCH']='i686-w64-mingw32'
        env['LIBGCCDLL'] = "libgcc_s_sjlj-1.dll"
    elif ARGUMENTS.get('mingw64', 0):
        env['HOST']='w64'
        env['HOSTBITS']='64'
        env['ARCH']='x86_64-w64-mingw32'
        env['LIBGCCDLL'] = "libgcc_s_seh-1.dll"
    env['CC']='${ARCH}-gcc'
    env['CXX']='${ARCH}-g++'
    env['AR']='${ARCH}-ar'
    env['RANLIB']='${ARCH}-ranlib'
#    env.ParseConfig("PKG_CONFIG_PATH=/usr/local/mingw32/lib/pkgconfig:/usr/i686-w64-mingw32/sys-root/mingw/lib/pkgconfig pkg-config --cflags --libs " )
    env['OBJSUFFIX']=".obj"
    env['PROGSUFFIX'] = ".exe"
    env['LOCAL_DIR']='ming${HOST}'
    env['PREFIX']='/usr/local/${LOCAL_DIR}'
    env['PKGCONFIG'] = "env PKG_CONFIG_PATH=/usr/${ARCH}/sys-root/mingw/lib/pkgconfig:/usr/local/${LOCAL_DIR}/lib/pkgconfig pkg-config"
elif env['PLATFORM'] == "cygwin" :
#    env.ParseConfig("pkg-config --cflags --libs " + libs)
    linkflags += ['-mms-bitfields',
                  '-mno-cygwin',
                  '-mwindows'
                  ]
    cppflags += ['-mms-bitfields',
                 '-mno-cygwin']
    env.Append(CPPPATH=['/usr/local/include'],
               PREFIX='/usr/local'
               )
else :
    if ARGUMENTS.get('clang',0):
        env['CC'] = 'clang'
        env['CXX'] = 'clang++'

    env.ParseConfig("env PKG_CONFIG_PATH=/usr/local/lib/pkgconfig pkg-config --cflags --libs " + libs)
    env.Append(PREFIX='/usr/local',
               )
    

env.Append(CPPPATH=["."])
env.Append(prefix=env['PREFIX'],
           exec_prefix='${prefix}/bin',
           libdir='${prefix}/lib',
           includedir='${prefix}/include',
           VERSION="0.1.4")

env.AlwaysBuild(env.Substfile("plis.pc",
                              "../plis.pc.in",
                              SUBST_DICT={'@prefix@' : '$PREFIX',
                                          '@exec_prefix@': '$exec_prefix',
                                          '@libdir@': '$libdir',
                                          '@includedir@': '$includedir',
                                          '@VERSION@': '$VERSION'}))

env.Append(CPPFLAGS= cppflags,
           LINKFLAGS = linkflags,
           LIBS=["pcre"])
include = ['plis.h','plis_regexp.h']

lib = env.Library('plis',
                  ['plis.cc'
                   ]) 

env.Program('test_library',
            ['test_library.cc',
             lib])

env.Program('test-intl',
            ['test-intl.cc',
             lib])

env.Alias("install",
          [env.Install('${PREFIX}/lib',
                       lib),
           env.Install('${PREFIX}/include/plis',
                       include),
           env.Install('${PREFIX}/lib/pkgconfig',
                       'plis.pc'),
           ])

